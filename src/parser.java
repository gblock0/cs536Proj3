
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Fri Nov 01 17:19:35 CDT 2013
//----------------------------------------------------

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 5},     {2, 2},     {2, 1},     {3, 2}, 
        {3, 0},     {4, 2},     {4, 0},     {5, 1},     {5, 0}, 
        {6, 9},     {6, 10},     {6, 9},     {6, 10},     {7, 3}, 
        {7, 1},     {8, 2},     {8, 4},     {9, 3},     {9, 5}, 
        {9, 6},     {9, 5},     {10, 2},     {10, 0},     {11, 5}, 
        {11, 7},     {11, 5},     {11, 7},     {11, 4},     {11, 3}, 
        {11, 3},     {11, 5},     {11, 5},     {11, 4},     {11, 5}, 
        {11, 2},     {11, 3},     {11, 3},     {11, 3},     {11, 5}, 
        {12, 1},     {12, 1},     {12, 1},     {13, 3},     {13, 1}, 
        {14, 3},     {14, 1},     {15, 3},     {15, 1},     {16, 3}, 
        {16, 3},     {16, 1},     {17, 3},     {17, 3},     {17, 3}, 
        {17, 3},     {17, 3},     {17, 3},     {17, 1},     {18, 3}, 
        {18, 3},     {18, 1},     {19, 3},     {19, 3},     {19, 1}, 
        {20, 2},     {20, 4},     {20, 1},     {21, 1},     {21, 3}, 
        {21, 4},     {21, 1},     {21, 1},     {21, 1},     {21, 1}, 
        {21, 1},     {21, 3},     {22, 1},     {22, 4},     {23, 1}
      };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{42,3,-1,0},
    /*1*/{0,197,-1,0},
    /*2*/{2,4,-1,0},
    /*3*/{6,-80,7,-80,8,-80,9,-80,11,-80,12,-80,13,-80,14,-80,15,-80,16,-80,17,-80,19,-80,20,-80,21,-80,22,-80,23,-80,24,-80,25,-80,26,-80,27,-80,28,-80,29,-80,30,-80,-1,0},
    /*4*/{9,6,-1,0},
    /*5*/{10,-8,39,7,43,8,44,14,45,16,46,11,-1,0},
    /*6*/{2,-42,7,-42,-1,0},
    /*7*/{2,4,-1,0},
    /*8*/{10,-8,39,7,44,14,45,16,46,11,-1,0},
    /*9*/{10,189,-1,0},
    /*10*/{2,-43,7,-43,-1,0},
    /*11*/{10,-8,39,7,43,8,44,14,45,16,46,11,-1,0},
    /*12*/{10,-4,-1,0},
    /*13*/{2,4,-1,0},
    /*14*/{2,4,-1,0},
    /*15*/{2,-41,7,-41,-1,0},
    /*16*/{6,19,8,21,11,20,12,18,-1,0},
    /*17*/{2,-19,9,-19,10,-19,31,-19,32,-19,33,-19,37,-19,38,-19,39,-19,40,-19,41,-19,43,-19,44,-19,45,-19,46,-19,-1,0},
    /*18*/{7,82,39,7,45,16,46,11,-1,0},
    /*19*/{3,78,-1,0},
    /*20*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*21*/{7,-69,12,-69,13,-69,14,-69,15,-69,16,-69,17,-69,19,-69,20,-69,23,-69,24,-69,25,-69,27,-69,28,-69,29,-69,30,-69,-1,0},
    /*22*/{7,-62,12,-62,13,-62,14,-62,15,-62,16,-62,17,58,19,-62,20,-62,23,57,24,-62,25,-62,27,-62,28,-62,29,-62,30,-62,-1,0},
    /*23*/{7,-72,12,-72,13,-72,14,-72,15,-72,16,-72,17,-72,19,-72,20,-72,23,-72,24,-72,25,-72,27,-72,28,-72,29,-72,30,-72,-1,0},
    /*24*/{7,-65,12,-65,13,-65,14,-65,15,-65,16,-65,17,-65,19,-65,20,-65,23,-65,24,-65,25,-65,27,-65,28,-65,29,-65,30,-65,-1,0},
    /*25*/{7,-52,12,-52,13,-52,15,-52,19,-52,25,-52,-1,0},
    /*26*/{7,-74,12,-74,13,-74,14,-74,15,-74,16,-74,17,-74,19,-74,20,-74,23,-74,24,-74,25,-74,27,-74,28,-74,29,-74,30,-74,-1,0},
    /*27*/{7,-75,12,-75,13,-75,14,-75,15,-75,16,-75,17,-75,19,-75,20,-75,23,-75,24,-75,25,-75,27,-75,28,-75,29,-75,30,-75,-1,0},
    /*28*/{6,68,7,-78,11,69,12,-78,13,-78,14,-78,15,-78,16,-78,17,-78,19,-78,20,-78,23,-78,24,-78,25,-78,27,-78,28,-78,29,-78,30,-78,-1,0},
    /*29*/{7,-76,12,-76,13,-76,14,-76,15,-76,16,-76,17,-76,19,-76,20,-76,23,-76,24,-76,25,-76,27,-76,28,-76,29,-76,30,-76,-1,0},
    /*30*/{7,-59,12,-59,13,-59,14,50,15,-59,16,48,19,-59,20,51,24,53,25,-59,27,52,28,55,29,49,30,54,-1,0},
    /*31*/{7,-73,12,-73,13,-73,14,-73,15,-73,16,-73,17,-73,19,-73,20,-73,23,-73,24,-73,25,-73,27,-73,28,-73,29,-73,30,-73,-1,0},
    /*32*/{12,47,13,43,15,41,-1,0},
    /*33*/{7,-68,12,-68,13,-68,14,-68,15,-68,16,-68,17,-68,19,-68,20,-68,23,-68,24,-68,25,-68,27,-68,28,-68,29,-68,30,-68,-1,0},
    /*34*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*35*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,39,7,45,16,46,11,-1,0},
    /*36*/{7,42,13,43,15,41,-1,0},
    /*37*/{7,39,-1,0},
    /*38*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*39*/{7,-67,12,-67,13,-67,14,-67,15,-67,16,-67,17,-67,19,-67,20,-67,23,-67,24,-67,25,-67,27,-67,28,-67,29,-67,30,-67,-1,0},
    /*40*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*41*/{7,-77,12,-77,13,-77,14,-77,15,-77,16,-77,17,-77,19,-77,20,-77,23,-77,24,-77,25,-77,27,-77,28,-77,29,-77,30,-77,-1,0},
    /*42*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*43*/{7,-50,12,-50,13,-50,15,-50,19,-50,25,-50,-1,0},
    /*44*/{7,-51,12,-51,13,-51,15,-51,19,-51,25,-51,-1,0},
    /*45*/{7,-66,12,-66,13,-66,14,-66,15,-66,16,-66,17,-66,19,-66,20,-66,23,-66,24,-66,25,-66,27,-66,28,-66,29,-66,30,-66,-1,0},
    /*46*/{2,-20,9,-20,10,-20,31,-20,32,-20,33,-20,37,-20,38,-20,39,-20,40,-20,41,-20,43,-20,44,-20,45,-20,46,-20,-1,0},
    /*47*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*48*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*49*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*50*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*51*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*52*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*53*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*54*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*55*/{7,-61,12,-61,13,-61,14,-61,15,-61,16,-61,17,58,19,-61,20,-61,23,57,24,-61,25,-61,27,-61,28,-61,29,-61,30,-61,-1,0},
    /*56*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*57*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*58*/{7,-63,12,-63,13,-63,14,-63,15,-63,16,-63,17,-63,19,-63,20,-63,23,-63,24,-63,25,-63,27,-63,28,-63,29,-63,30,-63,-1,0},
    /*59*/{7,-64,12,-64,13,-64,14,-64,15,-64,16,-64,17,-64,19,-64,20,-64,23,-64,24,-64,25,-64,27,-64,28,-64,29,-64,30,-64,-1,0},
    /*60*/{7,-58,12,-58,13,-58,15,-58,19,-58,25,-58,27,52,28,55,-1,0},
    /*61*/{7,-55,12,-55,13,-55,15,-55,19,-55,25,-55,27,52,28,55,-1,0},
    /*62*/{7,-60,12,-60,13,-60,14,-60,15,-60,16,-60,17,58,19,-60,20,-60,23,57,24,-60,25,-60,27,-60,28,-60,29,-60,30,-60,-1,0},
    /*63*/{7,-56,12,-56,13,-56,15,-56,19,-56,25,-56,27,52,28,55,-1,0},
    /*64*/{7,-54,12,-54,13,-54,15,-54,19,-54,25,-54,27,52,28,55,-1,0},
    /*65*/{7,-57,12,-57,13,-57,15,-57,19,-57,25,-57,27,52,28,55,-1,0},
    /*66*/{7,-53,12,-53,13,-53,15,-53,19,-53,25,-53,27,52,28,55,-1,0},
    /*67*/{2,4,3,24,4,27,5,32,6,36,7,74,18,35,34,28,36,30,-1,0},
    /*68*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*69*/{13,43,15,41,25,71,-1,0},
    /*70*/{7,-79,8,-79,12,-79,13,-79,14,-79,15,-79,16,-79,17,-79,19,-79,20,-79,21,-79,22,-79,23,-79,24,-79,25,-79,27,-79,28,-79,29,-79,30,-79,-1,0},
    /*71*/{7,-45,13,43,15,41,19,76,-1,0},
    /*72*/{7,75,-1,0},
    /*73*/{7,-70,12,-70,13,-70,14,-70,15,-70,16,-70,17,-70,19,-70,20,-70,23,-70,24,-70,25,-70,27,-70,28,-70,29,-70,30,-70,-1,0},
    /*74*/{7,-71,12,-71,13,-71,14,-71,15,-71,16,-71,17,-71,19,-71,20,-71,23,-71,24,-71,25,-71,27,-71,28,-71,29,-71,30,-71,-1,0},
    /*75*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*76*/{7,-44,-1,0},
    /*77*/{25,79,-1,0},
    /*78*/{12,80,-1,0},
    /*79*/{2,-21,9,-21,10,-21,31,-21,32,-21,33,-21,37,-21,38,-21,39,-21,40,-21,41,-21,43,-21,44,-21,45,-21,46,-21,-1,0},
    /*80*/{7,-16,19,171,-1,0},
    /*81*/{9,166,-1,0},
    /*82*/{2,4,-1,0},
    /*83*/{7,85,-1,0},
    /*84*/{9,86,-1,0},
    /*85*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*86*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*87*/{2,4,-1,0},
    /*88*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*89*/{2,4,-1,0},
    /*90*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*91*/{6,147,-1,0},
    /*92*/{8,142,21,141,22,140,-1,0},
    /*93*/{10,137,-1,0},
    /*94*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*95*/{6,130,-1,0},
    /*96*/{2,4,3,24,4,27,5,32,6,36,12,127,18,35,34,28,36,30,-1,0},
    /*97*/{6,116,8,-78,11,69,21,-78,22,-78,26,115,-1,0},
    /*98*/{6,111,-1,0},
    /*99*/{6,104,-1,0},
    /*100*/{2,4,-1,0},
    /*101*/{12,103,-1,0},
    /*102*/{2,-39,9,-39,10,-39,31,-39,32,-39,33,-39,35,-39,37,-39,38,-39,40,-39,41,-39,-1,0},
    /*103*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*104*/{7,109,-1,0},
    /*105*/{7,-49,13,43,15,41,19,107,-1,0},
    /*106*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*107*/{7,-48,-1,0},
    /*108*/{12,110,-1,0},
    /*109*/{2,-33,9,-33,10,-33,31,-33,32,-33,33,-33,35,-33,37,-33,38,-33,40,-33,41,-33,-1,0},
    /*110*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*111*/{7,113,13,43,15,41,-1,0},
    /*112*/{2,4,9,91,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*113*/{2,-27,9,-27,10,-27,31,-27,32,-27,33,-27,35,-27,37,-27,38,-27,40,-27,41,-27,-1,0},
    /*114*/{38,122,-1,0},
    /*115*/{2,4,3,24,4,27,5,32,6,36,7,118,18,35,34,28,36,30,-1,0},
    /*116*/{7,120,-1,0},
    /*117*/{12,119,-1,0},
    /*118*/{2,-34,9,-34,10,-34,31,-34,32,-34,33,-34,35,-34,37,-34,38,-34,40,-34,41,-34,-1,0},
    /*119*/{12,121,-1,0},
    /*120*/{2,-35,9,-35,10,-35,31,-35,32,-35,33,-35,35,-35,37,-35,38,-35,40,-35,41,-35,-1,0},
    /*121*/{6,123,-1,0},
    /*122*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*123*/{7,125,13,43,15,41,-1,0},
    /*124*/{2,4,9,91,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*125*/{2,-28,9,-28,10,-28,31,-28,32,-28,33,-28,35,-28,37,-28,38,-28,40,-28,41,-28,-1,0},
    /*126*/{2,-36,9,-36,10,-36,31,-36,32,-36,33,-36,35,-36,37,-36,38,-36,40,-36,41,-36,-1,0},
    /*127*/{12,129,13,43,15,41,-1,0},
    /*128*/{2,-37,9,-37,10,-37,31,-37,32,-37,33,-37,35,-37,37,-37,38,-37,40,-37,41,-37,-1,0},
    /*129*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*130*/{7,132,13,43,15,41,-1,0},
    /*131*/{2,4,9,91,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*132*/{2,-25,9,-25,10,-25,31,-25,32,-25,33,-25,35,134,37,-25,38,-25,40,-25,41,-25,-1,0},
    /*133*/{2,4,9,91,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*134*/{2,-26,9,-26,10,-26,31,-26,32,-26,33,-26,35,-26,37,-26,38,-26,40,-26,41,-26,-1,0},
    /*135*/{10,-23,-1,0},
    /*136*/{10,-10,12,139,39,-10,44,-10,45,-10,46,-10,-1,0},
    /*137*/{10,-14,39,-14,44,-14,45,-14,46,-14,-1,0},
    /*138*/{2,-9,9,-9,10,-9,31,-9,32,-9,33,-9,35,-9,37,-9,38,-9,39,-9,40,-9,41,-9,44,-9,45,-9,46,-9,-1,0},
    /*139*/{12,146,-1,0},
    /*140*/{12,145,-1,0},
    /*141*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*142*/{12,144,13,43,15,41,-1,0},
    /*143*/{2,-29,9,-29,10,-29,31,-29,32,-29,33,-29,35,-29,37,-29,38,-29,40,-29,41,-29,-1,0},
    /*144*/{2,-30,9,-30,10,-30,31,-30,32,-30,33,-30,35,-30,37,-30,38,-30,40,-30,41,-30,-1,0},
    /*145*/{2,-31,9,-31,10,-31,31,-31,32,-31,33,-31,35,-31,37,-31,38,-31,40,-31,41,-31,-1,0},
    /*146*/{2,4,-1,0},
    /*147*/{7,-47,19,153,-1,0},
    /*148*/{7,151,-1,0},
    /*149*/{7,-78,11,69,19,-78,-1,0},
    /*150*/{12,152,-1,0},
    /*151*/{2,-32,9,-32,10,-32,31,-32,32,-32,33,-32,35,-32,37,-32,38,-32,40,-32,41,-32,-1,0},
    /*152*/{2,4,-1,0},
    /*153*/{7,-46,-1,0},
    /*154*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*155*/{10,157,-1,0},
    /*156*/{2,-10,9,-10,10,-10,12,139,31,-10,32,-10,33,-10,35,-10,37,-10,38,-10,40,-10,41,-10,-1,0},
    /*157*/{2,-40,9,-40,10,-40,31,-40,32,-40,33,-40,35,-40,37,-40,38,-40,40,-40,41,-40,-1,0},
    /*158*/{12,160,-1,0},
    /*159*/{2,-38,9,-38,10,-38,31,-38,32,-38,33,-38,35,-38,37,-38,38,-38,40,-38,41,-38,-1,0},
    /*160*/{8,21,11,20,12,18,-1,0},
    /*161*/{2,-5,9,-5,10,-5,31,-5,32,-5,33,-5,37,-5,38,-5,40,-5,41,-5,-1,0},
    /*162*/{7,-17,11,164,19,-17,-1,0},
    /*163*/{25,165,-1,0},
    /*164*/{7,-18,19,-18,-1,0},
    /*165*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*166*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*167*/{10,169,-1,0},
    /*168*/{10,-10,12,139,39,-10,44,-10,45,-10,46,-10,-1,0},
    /*169*/{10,-13,39,-13,44,-13,45,-13,46,-13,-1,0},
    /*170*/{39,7,45,16,46,11,-1,0},
    /*171*/{7,-15,-1,0},
    /*172*/{6,174,-1,0},
    /*173*/{7,175,39,7,45,16,46,11,-1,0},
    /*174*/{9,183,-1,0},
    /*175*/{7,177,-1,0},
    /*176*/{9,178,-1,0},
    /*177*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*178*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*179*/{10,181,-1,0},
    /*180*/{10,-10,12,139,39,-10,44,-10,45,-10,46,-10,-1,0},
    /*181*/{10,-12,39,-12,44,-12,45,-12,46,-12,-1,0},
    /*182*/{2,-6,9,-6,10,-6,31,-6,32,-6,33,-6,37,-6,38,-6,39,7,40,-6,41,-6,43,8,45,16,46,11,-1,0},
    /*183*/{2,4,9,91,10,-24,31,96,32,90,33,101,37,100,38,99,40,97,41,92,-1,0},
    /*184*/{10,186,-1,0},
    /*185*/{10,-10,12,139,39,-10,44,-10,45,-10,46,-10,-1,0},
    /*186*/{10,-11,39,-11,44,-11,45,-11,46,-11,-1,0},
    /*187*/{10,-3,-1,0},
    /*188*/{0,-2,-1,0},
    /*189*/{10,-7,-1,0},
    /*190*/{2,4,-1,0},
    /*191*/{6,19,-1,0},
    /*192*/{8,194,-1,0},
    /*193*/{2,4,3,24,4,27,5,32,6,36,18,35,34,28,36,30,-1,0},
    /*194*/{12,196,13,43,15,41,-1,0},
    /*195*/{2,-22,9,-22,10,-22,31,-22,32,-22,33,-22,37,-22,38,-22,39,-22,40,-22,41,-22,43,-22,44,-22,45,-22,46,-22,-1,0},
    /*196*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,1,-1,-1},
    /*1*/{-1,-1},
    /*2*/{23,4,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{2,9,4,12,6,8,9,11,12,14,-1,-1},
    /*6*/{-1,-1},
    /*7*/{23,192,-1,-1},
    /*8*/{4,189,6,8,12,190,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{2,187,4,12,6,8,9,11,12,14,-1,-1},
    /*12*/{-1,-1},
    /*13*/{23,172,-1,-1},
    /*14*/{23,16,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{7,83,8,80,12,82,-1,-1},
    /*19*/{-1,-1},
    /*20*/{16,32,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{20,45,21,33,22,21,23,28,-1,-1},
    /*35*/{12,37,16,36,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{20,39,21,33,22,21,23,28,-1,-1},
    /*39*/{-1,-1},
    /*40*/{17,44,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*41*/{-1,-1},
    /*42*/{17,43,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{18,66,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*48*/{18,65,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*49*/{18,64,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*50*/{18,63,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*51*/{19,62,20,24,21,33,22,21,23,28,-1,-1},
    /*52*/{18,61,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*53*/{18,60,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*54*/{19,55,20,24,21,33,22,21,23,28,-1,-1},
    /*55*/{-1,-1},
    /*56*/{20,59,21,33,22,21,23,28,-1,-1},
    /*57*/{20,58,21,33,22,21,23,28,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{13,72,16,71,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*68*/{16,69,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{13,76,16,71,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{23,162,-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{3,88,9,86,12,87,-1,-1},
    /*86*/{3,161,9,86,12,87,-1,-1},
    /*87*/{23,160,-1,-1},
    /*88*/{10,93,11,94,22,92,23,97,-1,-1},
    /*89*/{23,158,-1,-1},
    /*90*/{3,154,9,86,12,87,-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{10,135,11,94,22,92,23,97,-1,-1},
    /*95*/{-1,-1},
    /*96*/{16,127,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{23,101,-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{15,104,16,105,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{15,107,16,105,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{16,111,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*111*/{-1,-1},
    /*112*/{11,113,22,92,23,97,-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{13,116,16,71,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{16,123,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*123*/{-1,-1},
    /*124*/{11,125,22,92,23,97,-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{16,130,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*130*/{-1,-1},
    /*131*/{11,132,22,92,23,97,-1,-1},
    /*132*/{-1,-1},
    /*133*/{11,134,22,92,23,97,-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{5,137,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{16,142,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{14,148,22,147,23,149,-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{14,153,22,147,23,149,-1,-1},
    /*153*/{-1,-1},
    /*154*/{10,155,11,94,22,92,23,97,-1,-1},
    /*155*/{-1,-1},
    /*156*/{5,157,-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{3,166,9,86,12,87,-1,-1},
    /*166*/{10,167,11,94,22,92,23,97,-1,-1},
    /*167*/{-1,-1},
    /*168*/{5,169,-1,-1},
    /*169*/{-1,-1},
    /*170*/{7,171,8,80,12,82,-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{7,175,8,80,12,82,-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{3,178,9,86,12,87,-1,-1},
    /*178*/{10,179,11,94,22,92,23,97,-1,-1},
    /*179*/{-1,-1},
    /*180*/{5,181,-1,-1},
    /*181*/{-1,-1},
    /*182*/{3,183,9,86,12,87,-1,-1},
    /*183*/{10,184,11,94,22,92,23,97,-1,-1},
    /*184*/{-1,-1},
    /*185*/{5,186,-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{23,191,-1,-1},
    /*191*/{-1,-1},
    /*192*/{-1,-1},
    /*193*/{16,194,17,25,18,30,19,22,20,24,21,33,22,21,23,28,-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {

  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new identNode(i.identifierText, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(23/*ident*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // name ::= ident LBRACKET expr RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new nameNode(i, e, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(22/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new nameNode(i, exprNodeOption.NULL, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(22/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unit ::= LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = e; 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new falseNode(f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new trueNode(t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXStringLitToken s = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new strLitNode(s.stringText, s.linenum, s.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXCharLitToken c = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new charLitNode(c.charValue, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new intLitNode(i.intValue, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new fctCallNode(id, a, id.linenum, id.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new fctCallNode(id, argsNode.NULL, id.linenum, id.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = n; 
              CUP$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new castNode(t, u, l.linenum, l.colnum); 
              CUP$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken n = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new unaryOpNode(sym.NOT, u, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum); 
              CUP$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum); 
              CUP$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = p; 
              CUP$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.MINUS, p, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.PLUS, p, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = f; 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.NOTEQ, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.EQ, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.GEQ, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.LEQ, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		  RESULT = new binaryOpNode(f, sym.GT, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f, sym.LT, r, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = t; 
              CUP$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr CAND term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(e, sym.CAND,t, e.linenum, e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr COR term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(e, sym.COR, t, e.linenum, e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printlist ::= expr 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT= new printNode(e,printNodeOption.NULL,e.linenum,e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(15/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printlist ::= expr COMMA printlist 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		printNode p = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new printNode(e, p, e.linenum, e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(15/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // readlist ::= name 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		  RESULT = new readNode(n, readNodeOption.NULL, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(14/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // readlist ::= name COMMA readlist 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		readNode r = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new readNode(n, r, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(14/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= expr 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argsNode(e, argsNodeOption.NULL, e.linenum, e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= expr COMMA args 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argsNode(e, a, e.linenum, e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new boolTypeNode(b.linenum, b.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new charTypeNode(c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new intTypeNode(i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new blockNode(f,s, l.linenum, l.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new continueNode(i, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new breakNode(i, b.linenum, b.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_RETURN expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new returnNode(e, r.linenum, r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new returnNode(exprNodeOption.NULL, r.linenum, r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argsNodeOption as = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new callNode(id, as, id.linenum, id.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		 RESULT = new callNode(id, argsNodeOption.NULL, id.linenum, id.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= rw_PRINT LPAREN printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		printNode p = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new printNode(p.outputValue, p.morePrints, r.linenum, r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		readNode l = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new readNode(l.targetVar, l.moreReads, r.linenum, r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= name DECREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new decrementNode(n, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= name INCREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new incrementNode(n, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= name ASG expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new asgNode(n, e, n.linenum, n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ident COLON rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new whileNode(i, e, s, w.linenum, w.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= rw_IF LPAREN expr RPAREN stmt rw_ELSE stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode t = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new ifThenNode(e,s,t, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_IF LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new ifThenNode(e, s, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= 
            {
              stmtsOption RESULT = null;
		 RESULT = stmtsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(10/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt stmts 
            {
              stmtsOption RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtsOption t = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new stmtsNode(s, t, s.linenum, s.colnum); 
              CUP$result = new java_cup.runtime.Symbol(10/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fielddecl ::= rw_CONST ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new constDeclNode(i, e, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fielddecl ::= type ident LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXIntLitToken l = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new arrayDeclNode(i, t, new intLitNode(l.intValue, l.linenum, l.colnum), t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= type ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new varDeclNode(i, t, e, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new varDeclNode(i,t,exprNode.NULL, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		  RESULT = new arrayArgDeclNode(i, t, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new valArgDeclNode(i, t, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argdecls ::= argdecl 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argDeclsNode(a, argDeclsNode.NULL, a.linenum, a.colnum); 
              CUP$result = new java_cup.runtime.Symbol(7/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclsOption s = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argDeclsNode(a, s, a.linenum,a.colnum); 
              CUP$result = new java_cup.runtime.Symbol(7/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i, a, t, f, s, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i, argDeclsNode.NULL, t, f, s, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i, a, new voidTypeNode(v.linenum, v.colnum), f,s, v.linenum, v.colnum); 
              CUP$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i, argDeclsNode.NULL, new voidTypeNode(v.linenum, v.colnum), f,s, v.linenum, v.colnum); 
              CUP$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalSemi ::= 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(5/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalSemi ::= SEMI 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(5/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              methodDeclsOption RESULT = null;
		 RESULT = methodDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(4/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsOption RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		methodDeclNode m = (methodDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption s = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new methodDeclsNode(m, s, m.linenum, m.colnum); 
              CUP$result = new java_cup.runtime.Symbol(4/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              fieldDeclsOption RESULT = null;
		 RESULT = fieldDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(3/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsOption RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		fieldDeclsOption s = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new fieldDeclsNode(f, s, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption m = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new memberDeclsNode(fieldDeclsNode.NULL, m, m.linenum, m.colnum); 
              CUP$result = new java_cup.runtime.Symbol(2/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new memberDeclsNode(new fieldDeclsNode(f, m.fields, f.linenum, f.colnum), m.methods, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(2/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT= new classNode(i, m, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

