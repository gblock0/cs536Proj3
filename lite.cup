/***
 *
 * This Is A Java CUP Specification For CSX-lite, a Small Subset
 * of The CSX Language, used In CS536
 * Extend this specification to handle all of CSX.
 *
 ***/

/* Preliminaries to set up and use the scanner.  */

import java_cup.runtime.*;
parser code {:
 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }
:};
init with {:              :};
scan with {: return Scanner.next_token(); :};


/* Terminals (tokens returned by the scanner). */
terminal CSXIdentifierToken     IDENTIFIER; 
terminal CSXIntLitToken         INTLIT;
terminal CSXStringLitToken      STRLIT;
terminal CSXCharLitToken        CHARLIT;
terminal CSXToken               LPAREN, RPAREN, ASG, LBRACE, RBRACE, LBRACKET, SEMI, COR;
terminal CSXToken               GT, CAND, LT, TIMES, NOT, COMMA, GEQ,  INCREMENT, DECREMENT;
terminal CSXToken               SLASH,  LEQ, RBRACKET, COLON, PLUS, MINUS, EQ, NOTEQ;
terminal CSXToken               rw_IF, rw_BREAK, rw_CONTINUE, rw_TRUE, rw_ELSE, rw_FALSE, rw_PRINT, rw_WHILE, rw_CHAR;
terminal CSXToken               rw_RETURN, rw_READ, rw_CLASS, rw_CONST, rw_VOID, rw_INT, rw_BOOL;

/* Non terminals */
non terminal classNode               prog;  
non terminal memberDeclsNode		 memberdecls;
non terminal fieldDeclsOption        fielddecls;
non terminal methodDeclsOption       methoddecls;
non terminal Symbol                  optionalSemi;
non terminal methodDeclNode          methoddecl;
non terminal argDeclsOption          argdecls;
non terminal argDeclNode             argdecl;
non terminal declNode           	 fielddecl;
non terminal stmtsOption             stmts;
non terminal stmtNode                stmt;
non terminal typeNode		         type;
non terminal argsNodeOption          args;
non terminal readNode	             readlist;
non terminal printNode		         printlist;
non terminal exprNode                expr;
non terminal exprNode                term;
non terminal exprNode                factor;
non terminal exprNode                pri;
non terminal exprNode	             unary;
non terminal exprNode                unit; 
non terminal nameNode                name;
non terminal identNode               ident;
non terminal intLitNode              intliteral;

precedence right rw_ELSE;


start with prog;


prog			::= rw_CLASS:c ident:i LBRACE memberdecls:m  RBRACE
						{: RESULT= new classNode(i, m, c.linenum, c.colnum); :}	
				;
		
memberdecls 	::= fielddecl:f memberdecls:m
						{: RESULT = new memberDeclsNode(new fieldDeclsNode(f, m.fields, f.linenum, f.colnum), m.methods, f.linenum, f.colnum); :}
				
				| 	methoddecls:m
						{: RESULT = new memberDeclsNode(fieldDeclsNode.NULL, m, m.linenum, m.colnum); :}
				;
			
fielddecls 		::= fielddecl:f fielddecls:s
						{: RESULT = new fieldDeclsNode(f, s, f.linenum, f.colnum); :}
				|
						{: RESULT = fieldDeclsNode.NULL; :}
				;	

methoddecls 	::= methoddecl:m methoddecls:s
						{: RESULT = new methodDeclsNode(m, s, m.linenum, m.colnum); :}
				|	
						{: RESULT = methodDeclsNode.NULL; :}
				;
			
optionalSemi 	::= SEMI
   		 	 	|
   		 	 	;

methoddecl		::= rw_VOID:v ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
						{: RESULT = new methodDeclNode(i, argDeclsNode.NULL, new voidTypeNode(v.linenum, v.colnum), f,s, v.linenum, v.colnum); :}
					
				|	rw_VOID:v ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
						{: RESULT = new methodDeclNode(i, a, new voidTypeNode(v.linenum, v.colnum), f,s, v.linenum, v.colnum); :}
						
 				|	type:t ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
						{: RESULT = new methodDeclNode(i, argDeclsNode.NULL, t, f, s, t.linenum, t.colnum); :}
						
                |   type:t ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
                        {: RESULT = new methodDeclNode(i, a, t, f, s, t.linenum, t.colnum); :}
                ;
                
argdecls        ::= argdecl:a COMMA argdecls:s
                        {: RESULT = new argDeclsNode(a, s, a.linenum,a.colnum); :}
                        
                |	argdecl:a
                        {: RESULT = new argDeclsNode(a, argDeclsNode.NULL, a.linenum, a.colnum); :}
                ;

argdecl         ::= type:t ident:i
                        {: RESULT = new valArgDeclNode(i, t, t.linenum, t.colnum); :}
                        
                |	type:t ident:i LBRACKET RBRACKET
                        {:  RESULT = new arrayArgDeclNode(i, t, t.linenum, t.colnum); :}
                ;


fielddecl       ::= type:t ident:i SEMI 
                        {: RESULT = new varDeclNode(i,t,exprNode.NULL, t.linenum, t.colnum); :}
                        
                |	type:t ident:i ASG expr:e SEMI
                        {: RESULT = new varDeclNode(i, t, e, t.linenum, t.colnum); :}
                        
                |	type:t ident:i LBRACKET INTLIT:l RBRACKET SEMI
                        {: RESULT = new arrayDeclNode(i, t, new intLitNode(l.intValue, l.linenum, l.colnum), t.linenum, t.colnum); :}
                        
                |	rw_CONST:c ident:i ASG expr:e SEMI
                        {: RESULT = new constDeclNode(i, e, c.linenum, c.colnum); :}
                ;
                                        
stmts        	::= stmt:s  stmts:t
                		{: RESULT = new stmtsNode(s, t, s.linenum, s.colnum); :}
                
                | 
                		{: RESULT = stmtsNode.NULL; :} 
                ;

stmt        	::= rw_IF:i LPAREN expr:e RPAREN  stmt:s
                		{: RESULT = new ifThenNode(e, s, i.linenum, i.colnum); :}        

                |	rw_IF:i LPAREN expr:e RPAREN stmt:s rw_ELSE stmt:t
                         {: RESULT = new ifThenNode(e,s,t, i.linenum, i.colnum); :}        

                | 	rw_WHILE:w LPAREN expr:e RPAREN stmt:s
                		{: RESULT = new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum); :}
                
                | 	ident:i COLON rw_WHILE:w LPAREN expr:e RPAREN stmt:s
                		{: RESULT = new whileNode(i, e, s, w.linenum, w.colnum); :}
                
                | 	name:n ASG expr:e SEMI
                		{: RESULT = new asgNode(n, e, n.linenum, n.colnum); :}
                
                | 	name:n INCREMENT SEMI
                		{: RESULT = new incrementNode(n, n.linenum, n.colnum); :}
                
                | 	name:n DECREMENT SEMI
                		{: RESULT = new decrementNode(n, n.linenum, n.colnum); :}

                | 	rw_READ:r LPAREN readlist:l RPAREN SEMI
                		{: RESULT = new readNode(l.targetVar, l.moreReads, r.linenum, r.colnum); :}

                | 	rw_PRINT:r LPAREN printlist:p RPAREN SEMI
                		{: RESULT = new printNode(p.outputValue, p.morePrints, r.linenum, r.colnum); :}

                | 	ident:id LPAREN RPAREN SEMI
                		{: RESULT = new callNode(id, argsNodeOption.NULL, id.linenum, id.colnum); :}
                
                | 	ident:id LPAREN args:as RPAREN SEMI
               		 	{: RESULT = new callNode(id, as, id.linenum, id.colnum); :}

                | 	rw_RETURN:r SEMI
                		{: RESULT = new returnNode(exprNodeOption.NULL, r.linenum, r.colnum); :}

                | 	rw_RETURN:r expr:e SEMI
                		{: RESULT = new returnNode(e, r.linenum, r.colnum); :}

                | 	rw_BREAK:b ident:i SEMI
                		{: RESULT = new breakNode(i, b.linenum, b.colnum); :}

                | 	rw_CONTINUE:c ident:i SEMI
                		{: RESULT = new continueNode(i, c.linenum, c.colnum); :}

                | 	LBRACE:l fielddecls:f stmts:s RBRACE optionalSemi
                 		{: RESULT = new blockNode(f,s, l.linenum, l.colnum); :}        
                ;

type        	::= rw_INT:i
               			{: RESULT=new intTypeNode(i.linenum, i.colnum); :}
                
                | 	rw_CHAR:c
                		{: RESULT = new charTypeNode(c.linenum, c.colnum); :}
                		
                |   rw_BOOL:b
                		{: RESULT=new boolTypeNode(b.linenum, b.colnum); :}
                ; 

args         	::= expr:e COMMA args:a
                		{: RESULT = new argsNode(e, a, e.linenum, e.colnum); :}
                
                | 	expr:e
                		{: RESULT = new argsNode(e, argsNodeOption.NULL, e.linenum, e.colnum); :}
                ;                

readlist        ::= name:n COMMA readlist:r
                        {: RESULT = new readNode(n, r, n.linenum, n.colnum); :}
                        
                | 	name:n
                        {:  RESULT = new readNode(n, readNodeOption.NULL, n.linenum, n.colnum); :}
                ;

printlist       ::= expr:e COMMA printlist:p
                        {: RESULT = new printNode(e, p, e.linenum, e.colnum); :}
                        
                | 	expr:e
                        {: RESULT= new printNode(e,printNodeOption.NULL,e.linenum,e.colnum); :}
                ;

expr         	::= expr:e COR term:t
                		{: RESULT = new binaryOpNode(e, sym.COR, t, e.linenum, e.colnum); :}
                
                |	expr:e CAND term:t
                		{: RESULT = new binaryOpNode(e, sym.CAND,t, e.linenum, e.colnum); :} 
                |	term:t
                		{: RESULT = t; :}
                ;

term        	::= factor:f LT factor:r
                		{: RESULT = new binaryOpNode(f, sym.LT, r, f.linenum, f.colnum); :}
                
            	| 	factor:f GT factor:r
               			{:  RESULT = new binaryOpNode(f, sym.GT, r, f.linenum, f.colnum); :}
                
            	|	factor:f LEQ factor:r
                		{: RESULT = new binaryOpNode(f, sym.LEQ, r, f.linenum, f.colnum); :}
                
                | 	factor:f GEQ factor:r
                		{: RESULT = new binaryOpNode(f, sym.GEQ, r, f.linenum, f.colnum); :}
                
                |	factor:f EQ factor:r
                		{: RESULT = new binaryOpNode(f, sym.EQ, r, f.linenum, f.colnum); :}
                
                |	factor:f NOTEQ factor:r
                		{: RESULT = new binaryOpNode(f, sym.NOTEQ, r, f.linenum, f.colnum); :}
                
                |	factor:f
                		{: RESULT = f; :}
                ;

factor        	::=	factor:f PLUS pri:p
                		{: RESULT = new binaryOpNode(f, sym.PLUS, p, f.linenum, f.colnum); :}
                
                |	factor:f MINUS pri:p
                		{: RESULT = new binaryOpNode(f, sym.MINUS, p, f.linenum, f.colnum); :}
                
                |	pri:p
                		{: RESULT = p; :}
                ;

pri         	::= pri:p TIMES unary:u
                		{: RESULT = new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum); :}
                
                | 	pri:p SLASH unary:u
                		{: RESULT = new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum); :}
                
                | 	unary:u
                		{: RESULT = u; :}
                ;

unary        	::= NOT:n unary:u
               		 	{: RESULT = new unaryOpNode(sym.NOT, u, n.linenum, n.colnum); :}
                
                | 	LPAREN:l type:t RPAREN unary:u
                		{: RESULT = new castNode(t, u, l.linenum, l.colnum); :}
                
                | 	unit:u
                		{: RESULT = u; :}
                ;

unit         	::= name:n
                		{: RESULT = n; :}
                
                | 	ident:id LPAREN RPAREN
                		{: RESULT = new fctCallNode(id, argsNode.NULL, id.linenum, id.colnum); :}
                
                | 	ident:id LPAREN args:a RPAREN
                		{: RESULT = new fctCallNode(id, a, id.linenum, id.colnum); :}
                
                | 	INTLIT:i
                		{: RESULT = new intLitNode(i.intValue, i.linenum, i.colnum); :}
                
                | 	CHARLIT:c
                		{: RESULT = new charLitNode(c.charValue, c.linenum, c.colnum); :}
                
                | 	STRLIT:s
                		{: RESULT = new strLitNode(s.stringText, s.linenum, s.colnum); :}
                
                | 	rw_TRUE:t
                		{: RESULT = new trueNode(t.linenum, t.colnum); :}
                
                | 	rw_FALSE:f
                		{: RESULT = new falseNode(f.linenum, f.colnum); :}
                
                | 	LPAREN expr:e RPAREN 
                   		{: RESULT = e; :}
                ;

name         	::= ident:i
                   		{: RESULT = new nameNode(i, exprNodeOption.NULL, i.linenum, i.colnum); :}
                
                | ident:i LBRACKET expr:e RBRACKET
                   		{: RESULT = new nameNode(i, e, i.linenum, i.colnum); :}
                ;

ident			::= IDENTIFIER:i
			 			{: RESULT = new identNode(i.identifierText, i.linenum,i.colnum); :}	
				;
		
		

