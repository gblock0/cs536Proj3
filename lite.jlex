import java_cup.runtime.*;

/*  Expand this into your solution for project 2 */

class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col){
		linenum=line;colnum=col;};
}

class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col){
	   super(line,col);intValue=val; 
        };
}

class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col){
		super(line,col);identifierText=text;};
}

class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col){
		super(line,col);charValue=val;};
}

class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col){
		super(line,col);
		stringText=text;
	};
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
        static int countEOLs(String s) {
		char[] c = s.toCharArray();
		int cnt=0;
                for(int i=0; i < c.length; i++) {
			cnt+=(c[i]=='\n'?1:0);
                }
		return cnt;
	}
        static int distFromLastEOL(String s) {
		char[] c = s.toCharArray();
		int dist=1;
                for(int i= c.length-1; i >= 0; i--) {
			if (c[i] == '\n')
				return dist;
			else	dist++;
                }
		return 0;
	}
}

%%
Digit=[0-9]
IDENTIFIER=([a-zA-Z][a-zA-Z0-9]*)
INTLIT=([0-9][0-9]*)
NEGINTLIT=(("~")({INTLIT}))
STRCHAR=(([\040!#-\[\]-~])|(\\[\"nt\\]))
STRLIT=((\")({STRCHAR}*)(\"))
LITCHAR=(([\040-&(-\[\]-~])|(\\['nt\\]))
CHARLIT=((\')({LITCHAR})(\'))
COMMENT1=("//"(.)*\n)


// Tell JLex to have yylex() return a Symbol, as JavaCUP will require
%type Symbol

// Tell JLex what to return when eof of file is hit
%eofval{
return new Symbol(sym.EOF, new  CSXToken(0,0));
%eofval}

%%
[bB][oO][oO][lL] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_BOOL,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[bB][rR][Ee][Aa][kK]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_BREAK,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[cC][hH][aA][rR] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_CHAR,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[cC][lL][aA][sS][sS]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_CLASS,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[cC][oO][nN][sS][tT]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_CONST,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[cC][oO][nN][tT][iI][nN][uU][eE]  {Pos.setpos(); Pos.col +=8;
                        return new Symbol(sym.rw_CONTINUE,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[eE][lL][sS][eE] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_ELSE,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[fF][aA][lL][sS][eE]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_FALSE,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[iI][fF]  {Pos.setpos(); Pos.col +=2;
                        return new Symbol(sym.rw_IF,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[iI][nN][tT]  {Pos.setpos(); Pos.col +=3;
                        return new Symbol(sym.rw_INT,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[rR][eE][aA][dD] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_READ,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[rR][eE][tT][uU][rR][nN] {Pos.setpos(); Pos.col +=6;
                    return new Symbol(sym.rw_RETURN,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[pP][rR][iI][nN][tT]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_PRINT,
                            new CSXToken(Pos.linenum,Pos.colnum));}
[tT][rR][uU][eE] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_TRUE,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[vV][oO][iI][dD] {Pos.setpos(); Pos.col +=4;
                    return new Symbol(sym.rw_VOID,
                        new CSXToken(Pos.linenum,Pos.colnum));}
[wW][hH][iI][lL][eE]  {Pos.setpos(); Pos.col +=5;
                        return new Symbol(sym.rw_WHILE,
                            new CSXToken(Pos.linenum,Pos.colnum));}
{IDENTIFIER}    {Pos.setpos(); Pos.col += yytext().length();
                    return new Symbol(sym.IDENTIFIER,
                      new CSXIdentifierToken(yytext(),Pos.linenum,Pos.colnum));}
"("	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
")"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
"["	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
"]"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
"="	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.ASG,
			new CSXToken(Pos.linenum,Pos.colnum));}
";"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SEMI,
			new CSXToken(Pos.linenum,Pos.colnum));}
"+"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.PLUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
"-"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.MINUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
"*"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.TIMES,
			new CSXToken(Pos.linenum,Pos.colnum));}
"/"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SLASH,
			new CSXToken(Pos.linenum,Pos.colnum));}
"++"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.INCREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}
"--"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.DECREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}
"=="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.EQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
"!="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.NOTEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
"&&"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.CAND,
			new CSXToken(Pos.linenum,Pos.colnum));}
"||"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.COR,
			new CSXToken(Pos.linenum,Pos.colnum));}
"<"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LT,
			new CSXToken(Pos.linenum,Pos.colnum));}
">"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.GT,
			new CSXToken(Pos.linenum,Pos.colnum));}
"<="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.LEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
">="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.GEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
","	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COMMA,
			new CSXToken(Pos.linenum,Pos.colnum));}
"!"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.NOT,
			new CSXToken(Pos.linenum,Pos.colnum));}
"{"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
"}"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
":"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COLON,
			new CSXToken(Pos.linenum,Pos.colnum));}
{INTLIT}+	{ Pos.setpos(); Pos.col += yytext().length();
                  int i; double d = (new Double(yytext())).doubleValue();
                  if (d > Integer.MAX_VALUE){
                     System.out.println("Error: Integer literal "+
                         yytext()+" too large; replaced with "+
                         Integer.MAX_VALUE);
                     i=Integer.MAX_VALUE; }
                  else i = new Integer(yytext()).intValue(); 
                     
		  return new Symbol(sym.INTLIT,
				new CSXIntLitToken(
		                    	i,Pos.linenum,Pos.colnum));}

{NEGINTLIT}+	{ Pos.setpos(); Pos.col += yytext().length();
                  String unsignedVal = yytext().substring(1);
                  int i; double d = -1.0*(new Double(unsignedVal).doubleValue());
                  if (d < Integer.MIN_VALUE){
                     System.out.println("Error: Integer literal "+
                         yytext()+" too small; replaced with "+
                         Integer.MIN_VALUE);
                     i=Integer.MIN_VALUE; }
                  else i = -1*(new Integer(unsignedVal).intValue()); 
                     
		  return new Symbol(sym.INTLIT,
				new CSXIntLitToken(
		                    	i,Pos.linenum,Pos.colnum));}
{STRLIT}        { Pos.setpos(); Pos.col += yytext().length();
                    return new Symbol(sym.STRLIT,
                                new CSXStringLitToken(yytext(),
                                     Pos.linenum,Pos.colnum));}
{CHARLIT}       { Pos.setpos(); Pos.col += yytext().length();
			String val=yytext();
			char cval =  val.charAt(val.length()-2);
                        if (val.length()==4)
                           if (val.charAt(2)=='n')
                               cval = '\n';
                           else if (val.charAt(2)== 't')
                               cval = '\t';
                        return new Symbol(sym.CHARLIT,
                                new CSXCharLitToken(cval,
                                     Pos.linenum,Pos.colnum));}
{COMMENT1}	{Pos.line +=1; Pos.col = 1;}
"##"("#"?[^#])*"##"	{if (Pos.countEOLs(yytext()) > 0) {
                              Pos.line +=Pos.countEOLs(yytext());
                              Pos.col = Pos.distFromLastEOL(yytext());}
	                 else Pos.col += yytext().length(); }

\n	{Pos.line +=1; Pos.col = 1;}
" "	{Pos.col +=1;}
\t	{Pos.col +=1;}
(.)     {System.out.println("Illegal token ("+yytext()+ ") ignored.");}
